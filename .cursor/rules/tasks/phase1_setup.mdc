---
description: # Phase 1: プロジェクト基盤構築 – 実装ステップ設計書
globs:
alwaysApply: false
---

# Phase 1: プロジェクト基盤構築 – 実装ステップ設計書

> **目的**
>
> - 既存ローカルリポジトリに Next.js プロジェクトを初期化し、
>   **最新 LTS** 技術スタックで動作する開発基盤（Lint / Prettier / Tailwind / shadcn/ui / CI）を整える。
> - 以降の実装 Step が着手可能な状態にする。

---

## 1. タスク分解（修正版）

| チェック | ID      | 大タスク                       | サブタスク & 完了条件                                                                                                      |
| -------- | ------- | ------------------------------ | -------------------------------------------------------------------------------------------------------------------------- |
| - [ ]    | **1.1** | **Node.js & npm LTS 環境**     | グローバルが v20 でも OK。プロジェクト内で最新 LTS を強制するために **`.nvmrc` を作成**し、`nvm install && nvm use` が通る |
| - [ ]    | **1.2** | **Next.js プロジェクト初期化** | `npx create-next-app@latest . --typescript --eslint --app --import-alias "@/*"` 実行 → 初回コミット                        |
| - [ ]    | **1.3** | **Lint / Prettier 設定**       | ESLint (next/core-web-vitals) + Prettier 設定 → `npm run lint` が 0 エラー                                                 |
| - [ ]    | **1.4** | **Tailwind CSS 導入**          | `npx tailwindcss init -p` → `tailwind.config.ts` / `globals.css` 設定                                                      |
| - [ ]    | **1.5** | **shadcn/ui 導入**             | `npx shadcn-ui@latest init` でデフォルトテーマ → 依存追加                                                                  |
| - [ ]    | **1.6** | **TypeScript 厳格モード**      | `tsconfig.json` の `"strict": true` を確認／追加                                                                           |
| - [ ]    | **1.7** | **GitHub Actions (CI)**        | `.github/workflows/ci.yml` 作成 → Node LTS + npm で `lint` / `test`                                                        |
| - [ ]    | **1.8** | **README & バッジ**            | README に簡易説明＋ CI バッジ追加                                                                                          |
| - [ ]    | **1.9** | **CI 緑確認 & マージ**         | PR → CI 緑 → `main` にマージ                                                                                               |

---

## 2. 実装コマンド & ファイル例（最新 LTS をリポジトリ内で固定）

### 2.1 プロジェクト専用 Node.js LTS をセットアップ

```bash
# ❶ プロジェクト直下に .nvmrc を作成し「常に最新 LTS」を明示
echo "lts/*" > .nvmrc
git add .nvmrc
git commit -m "chore: add .nvmrc to pin latest LTS"

# ❷ .nvmrc に従って Node をインストール／使用
nvm install   # lts/* が解決され、自動で最新版 (例: v22.x) を取得
nvm use       # シェルを v22.x に切替

# ❸ バージョン確認（グローバル v20 とは別）
node -v       # → v22.x.x
npm  -v       # → 最新安定版

```

---

### 2.2. Next.js プロジェクト初期化

```bash
# 既存リポジトリ直下で実行
npx create-next-app@latest . \
  --typescript \
  --eslint \
  --app \
  --import-alias "@/*"
```

> **Note:**
>
> - `--app`: App Router を有効化
> - `--import-alias "@/*"`: `@/` で `src/` を参照できるように設定

---

### 2.3. Tailwind CSS 導入

```bash
# パッケージ追加
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p
```

**`tailwind.config.ts` 例**

```typescript
import type { Config } from 'tailwindcss';

export default <Config>{
  content: ['./src/**/*.{ts,tsx,js,jsx,mdx}'],
  theme: {
    extend: {},
  },
  plugins: [],
};
```

**`src/app/globals.css` 追記**

```css
@tailwind base;
@tailwind components;
@tailwind utilities;
```

### 2.4. ESLint / Prettier 設定

```bash
# Prettier を追加
npm install -D prettier eslint-config-prettier
```

**`.eslintrc.json`**

```json
{
  "extends": ["next/core-web-vitals", "prettier"]
}
```

**`.prettierrc`**

```json
{
  "semi": true,
  "singleQuote": true,
  "printWidth": 100,
  "tabWidth": 2,
  "trailingComma": "es5"
}
```

### 2.5. shadcn/ui 導入

```bash
# 初期化
npx shadcn-ui@latest init

# 推奨依存（アイコンなど）
npm install lucide-react
```

### 2.6. GitHub Actions (CI) 設定

**`.github/workflows/ci.yml`**

```yaml
name: CI

on:
  push:
    branches: [main]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node (LTS) & cache
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Unit tests
        run: npm test --if-present
```

### 2.7. README ひな形

````markdown
# GitHub Repository Search App

| CI Status                                                                               |
| :-------------------------------------------------------------------------------------- |
| ![CI](mdc:https:/github.com/<YOUR_USER>/<YOUR_REPO>/actions/workflows/ci.yml/badge.svg) |

Next.js (latest), Tailwind CSS, shadcn/ui を使用。
Node.js LTS 環境で以下を実行すると開発サーバーが起動します。

```bash
npm install
npm run dev
```
````

## 3. 必要情報（確認済）

| サブタスク | 必要情報                     | 状態                        |
| :--------- | :--------------------------- | :-------------------------- |
| 1.2        | `create-next-app` オプション | **確定**                    |
| 1.7        | CI Secrets                   | **不要**                    |
| 1.8        | README バッジ URL            | `<USER>` と `<REPO>` を置換 |
